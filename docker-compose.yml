version: '3'
services:
  db:
    build:
      context: ./postgre # Chemin vers le répertoire contenant le Dockerfile du conteneur postgre
      dockerfile: Dockerfile # Nom du Dockerfile du conteneur postgre
    container_name: db
    env_file: ./.env
    environment:
      POSTGRES_USER: coucou #$POSTGRES_USER # Récupère la valeur de POSTGRES_USER depuis le fichier .env
      POSTGRES_PASSWORD: toilabas #$POSTGRES_PASSWORD # Récupère la valeur de POSTGRES_PASSWORD depuis le fichier .env
      POSTGRES_DB: commentcava #$POSTGRES_DB # Récupère la valeur de POSTGRES_DB depuis le fichier .env
    ports:
      - "5432:5432" # Port sur lequel votre base de données PostgreSQL sera exposée
    restart: always
    networks:
      - default
    volumes:
      - ./postgre/data:/var/lib/postgresql/data # Montage d'un volume pour persister les données PostgreSQL
  web:
    build:
      context: ./web # Chemin vers le répertoire contenant le Dockerfile du conteneur npm
      dockerfile: Dockerfile # Nom du Dockerfile du conteneur npm
    container_name: web
    restart: always
    networks:
      - default
    volumes:
      - ./web/site:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    environment:
      - FAST_REFRESH=true # Active le hot reload de React
    depends_on:
      - db # Spécifie que le conteneur npm dépend du conteneur db (PostgreSQL)
  nest:
    build:
      context: ./nest # Chemin vers le répertoire contenant le Dockerfile du conteneur NestJS
      dockerfile: Dockerfile # Nom du Dockerfile du conteneur NestJS
    container_name: nest
    restart: always
    networks:
      - default
    volumes:
      - ./nest/back:/back # Chemin vers le répertoire contenant le code source de votre application NestJS
    ports:
      - "3001:3001" # Port sur lequel votre application NestJS sera exposée
    environment:
      - FAST_REFRESH=true # Active le hot reload
    depends_on:
      - db # Spécifie que le conteneur NestJS dépend du conteneur db (PostgreSQL)
networks:
  default:
